-- This file is part of the Haskell debugger Hoed.
--
-- Copyright (c) Maarten Faddegon, 2015

module Debug.Hoed.Pure.Prop
( judge
, Property(..)
) where

import Debug.Hoed.Pure.Observe(Trace(..),UID)
import Debug.Hoed.Pure.Render(CompStmt(..))
import Debug.Hoed.Pure.CompTree(Vertex(..))

import Prelude hiding (Right)
import Data.Graph.Libgraph(Judgement(..))
import System.Directory(createDirectoryIfMissing)

------------------------------------------------------------------------------------------------------------------------

data Property = Property {moduleName :: String, propertyName :: String, searchPath :: String}

sourceFile = ".Hoed/exe/Main.hs"
exeFile    = ".Hoed/exe/Main"

------------------------------------------------------------------------------------------------------------------------

judge :: Trace -> Property -> Vertex -> IO Vertex
judge trc prop v = do
  createDirectoryIfMissing True ".Hoed/exe"
  let i = (stmtIdentifier . vertexStmt) v
  writeFile sourceFile (generate prop trc i)
  -- MF TODO: compile, execute, judge
  return v

------------------------------------------------------------------------------------------------------------------------

generate :: Property -> Trace -> UID -> String
generate prop trc i = generateHeading prop ++ generateMain prop trc i

generateHeading :: Property -> String
generateHeading prop = 
  "-- This file is generated by the Haskell debugger Hoed\n"
  ++ "import " ++ moduleName prop ++ "\n"

generateMain :: Property -> Trace -> UID -> String
generateMain prop trc i = 
  "main = " ++ propertyName prop ++ " " ++ generateArgs trc i

generateArgs :: Trace -> UID -> String
generateArgs trc i = "(error \"not yet supported\")" -- MF TODO

------------------------------------------------------------------------------------------------------------------------
-- Some test data

p1 :: Property
p1 = Property "MyModule" "myProperty" "../Prop"

v1 :: Vertex
v1 = Vertex (CompStmt "bla" 1 "bla 3 = 4") Unassessed

t1, t2 :: IO ()
t1 = print $ generate p1 [] 1
t2 = do {judge [] p1 v1; return ()}
