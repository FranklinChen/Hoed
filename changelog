0.4.0 Maarten Faddegon 9 Sep 2017

  * Text based interface to the debugger for closer integration with an interpreter (e.g. ghci)
  * Remove many dependencies
  * Small tweaks to make Hoed work with a broader range of GHC versions

0.3.6 Maarten Faddegon 22 May 2016

  * Some minor fixes

0.3.5 Maarten Faddegon 9 Feb 2016

  * Give more control to restrict properties when used for judging to make approach sound.

0.3.4 Maarten Faddegon 8 Jan 2016

  * Added beta functionality of using properties to judge statements.

0.3.3 Maarten Faddegon 6 Dec 2015

  * Documentation and additional examples.

0.3.2 Maarten Faddegon 6 Dec 2015

  * Add experimental combinators for property-assisted algorithmic debugging.

0.3.1 Maarten Faddegon 20 Nov 2015

  * Some performance improvements in Debug.Hoed.Pure; add several extra examples.

0.3.0 Maarten Faddegon 3 Sep 2015

  * Add Debug.Hoed.Pure, allowing computation tree tracing with higher precision without depending on the cost centre stack extension.

0.2.2 Maarten Faddegon 14 July 2015

  * Use a preprocessor to make the library work with GHC 7.10, but also for older versions of GHC. This is related to the "The Applicative Monad Proposal" and the changes to Template Haskell in GHC 7.10 that are not backward compatibility with earlier versions of GHC.

0.2.1 Maarten Faddegon 1 May 2015

  * Small changes to make Hoed work with GHC 7.10

0.2.0 Maarten Faddegon 12 Feb 2015

  * A threepenny-gui algorithmic debugger.
  * Construction of computation trees with just local annotations. Existing algorithmic debuggers for Haskell require a transformation of all modules in a program, even libraries that the user does not want to debug and which may use language features not supported by the debugger. This is a pity, because a promising approach to debugging is therefore not applicable to many real-world programs. We use the cost centre stack from the Glasgow Haskell Compiler profiling environment together with runtime value observations to collect enough information for algorithmic debugging.

0.1.0.1 Maarten Faddegon 24 May 2014

  * A tracer library based on Andy Gills HOOD v0.2. Allows to observe intermediate values. How values are observed can be derived with the Generic Deriving Mechanism, or generated with Template Haskell. 
